package ru.kata.spring.boot_security.demo.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.kata.spring.boot_security.demo.dto.UserDTO;
import ru.kata.spring.boot_security.demo.model.Role;
import ru.kata.spring.boot_security.demo.model.User;
import ru.kata.spring.boot_security.demo.repository.RoleRepository;
import ru.kata.spring.boot_security.demo.repository.UserRepository;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class UserServiceImpl implements UserService {

        private final UserRepository userRepository;
        private final RoleRepository roleRepository;
        private final PasswordEncoder passwordEncoder;

        public UserServiceImpl(UserRepository userRepository, RoleRepository roleRepository,
                               PasswordEncoder passwordEncoder) {
            this.userRepository = userRepository;
            this.roleRepository = roleRepository;
            this.passwordEncoder = passwordEncoder;
        }

        @Override
        public Optional<User> findByUsername(String username) {
            return userRepository.findByUsername(username);
        }

        @Override
        public List<User> findAllUsers() {
            return userRepository.findAll();
        }

        @Override
        public Optional<User> findById(int id) {
            return userRepository.findById(id);
        }

    @Override
    public Optional<User> updateUser(int id, UserDTO userDTO) {
        return userRepository.findById(id).map(existingUser -> {
            // üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
            existingUser.setUsername(userDTO.getUsername());
            existingUser.setName(userDTO.getName());
            existingUser.setLastName(userDTO.getLastName());
            existingUser.setEmail(userDTO.getEmail());

            // üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ –∏–º–µ–Ω–∞–º
            Set<Role> roles = userDTO.getRoles().stream()
                    .map(roleName -> roleRepository.findByName(roleName)
                            .orElseThrow(() -> new RuntimeException("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + roleName)))
                    .collect(Collectors.toSet());

            existingUser.setRoles(roles);

            return userRepository.save(existingUser);
        });
    }
        @Override
        public boolean deleteById(int id) {
            if (userRepository.existsById(id)) {
                userRepository.deleteById(id);
                return true;
            }
            return false;
        }

    public User save(User user) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Set, –µ—Å–ª–∏ null
        Set<Role> roles = user.getRoles() != null ? user.getRoles() : new HashSet<>();

        // –ï—Å–ª–∏ —Ä–æ–ª–∏ –ø—É—Å—Ç—ã–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (roles.isEmpty()) {
            Role defaultRole = roleRepository.findByName("ROLE_USER")
                    .orElseThrow(() -> new RuntimeException("Default role ROLE_USER not found"));
            roles.add(defaultRole);
        }

        // –ú–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        Set<Role> mappedRoles = roles.stream()
                .map(role -> roleRepository.findByName(role.getName())
                        .orElseThrow(() -> new RuntimeException("Role not found: " + role.getName())))
                .collect(Collectors.toSet());

        user.setRoles(mappedRoles);
        return userRepository.save(user);
    }
    }

